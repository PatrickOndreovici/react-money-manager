[{"C:\\Users\\Patrick\\Desktop\\money-manager\\src\\index.js":"1","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\App.js":"2","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\reportWebVitals.js":"3","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\exchangeRatesApi.js":"4","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\Graph.js":"5","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\History.js":"6","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\Nav.js":"7","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\Dashboard.js":"8","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\Categories.js":"9","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\currencies.js":"10","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\Item.js":"11","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\TopCategories.js":"12","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\LineGraph.js":"13"},{"size":585,"mtime":1608904756719,"results":"14","hashOfConfig":"15"},{"size":1763,"mtime":1609694088984,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":240,"mtime":1609693972609,"results":"18","hashOfConfig":"15"},{"size":2200,"mtime":1609861517131,"results":"19","hashOfConfig":"15"},{"size":903,"mtime":1609693998933,"results":"20","hashOfConfig":"15"},{"size":1310,"mtime":1609868283767,"results":"21","hashOfConfig":"15"},{"size":11528,"mtime":1609861200356,"results":"22","hashOfConfig":"15"},{"size":1337,"mtime":1609782560048,"results":"23","hashOfConfig":"15"},{"size":247,"mtime":1609693930919,"results":"24","hashOfConfig":"15"},{"size":793,"mtime":1609694293433,"results":"25","hashOfConfig":"15"},{"size":3301,"mtime":1609786611964,"results":"26","hashOfConfig":"15"},{"size":4972,"mtime":1609862497411,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1d5zy7e",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"30"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"C:\\Users\\Patrick\\Desktop\\money-manager\\src\\index.js",[],["63","64"],"C:\\Users\\Patrick\\Desktop\\money-manager\\src\\App.js",[],"C:\\Users\\Patrick\\Desktop\\money-manager\\src\\reportWebVitals.js",[],"C:\\Users\\Patrick\\Desktop\\money-manager\\src\\exchangeRatesApi.js",[],"C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\Graph.js",["65","66","67","68","69","70"],"import React, {useEffect, useState} from 'react';\r\nimport {Line, Doughnut} from 'react-chartjs-2';\r\nimport exchangeRatesApi from '../exchangeRatesApi';\r\nimport currencies from './currencies';\r\nimport './Graph.css';\r\nimport TopCategories from './TopCategories';\r\nimport LineGraph from './LineGraph';\r\n\r\nfunction Graph() {\r\n  // current currency used to display data on graph\r\n  const [currency, setCurrency] = useState(\"EUR\");\r\n  \r\n  // graph data for 3 days\r\n  const [data, setData] = useState({\r\n    labels: ['other day', 'yesterday', 'today'],\r\n    datasets: [\r\n      {\r\n        label: 'Last 3 days',\r\n        fill: true,\r\n        lineTension: 0.1,\r\n        backgroundColor: 'rgba(75,192,192,0.4)',\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 5,\r\n        pointHoverRadius: 8,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n        data: [0, 0, 0]\r\n      }\r\n    ]\r\n  });\r\n  \r\n  const changeCurrency = (event) => {\r\n    setCurrency(event.target.value);\r\n  }\r\n\r\n  const displayCurrencyOptions = () => {\r\n    const arrayOfOptions = [];\r\n    for (let i = 0; i < currencies.length; ++i){\r\n      arrayOfOptions.push(<option key = {i}>{currencies[i]}</option>);\r\n    }\r\n    return arrayOfOptions;\r\n  }\r\n\r\n  return (\r\n    <div className=\"graph\">\r\n      <select style = {{margin: \"auto\", marginTop: \"40px\"}} onChange = {changeCurrency}>\r\n        {displayCurrencyOptions()}\r\n      </select>\r\n      <LineGraph key = {currency + \"1line\"} numberOfMonths = {4} currency = {currency}></LineGraph>\r\n      <div className = \"categories\">\r\n        <TopCategories key = {currency + \"1\"} currency = {currency} numberOfCategories = {3}></TopCategories>\r\n        <TopCategories key = {currency + \"2\"} currency = {currency} numberOfCategories = {5}></TopCategories>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Graph;\r\n","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\History.js",["71","72","73"],"import React, {useState} from 'react';\r\nimport './History.css'\r\nfunction History() {\r\n\r\n  const [currentDate, setCurrentDate] = useState(null);\r\n\r\n  const displayIncome = (date) => {\r\n    if (date === null){\r\n      return <h1>nu avem data</h1>\r\n    }\r\n    let history = localStorage.getItem('history');\r\n    if (history === null){\r\n      return null;\r\n    }\r\n    let parsedHistory = JSON.parse(history);\r\n  }\r\n\r\n  const displayExpense = (date) => {\r\n\r\n  }\r\n\r\n  const displayDeposit = (date) => {\r\n    \r\n  }\r\n  return (\r\n    <div className=\"History\">\r\n        <input type=\"date\" onChange = {(event) => setCurrentDate(event.target.value)}></input>\r\n        <h3 style = {{marginLeft: \"2rem\"}}>income</h3>\r\n        {displayIncome(currentDate)}\r\n        <h3 style = {{marginLeft: \"2rem\"}}>expense</h3>\r\n        <h3 style = {{marginLeft: \"2rem\"}}>deposit</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default History;\r\n","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\Nav.js",[],"C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\Dashboard.js",["74","75","76","77"],"import React, {useEffect, useState} from 'react';\r\nimport './Dashboard.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faTrashAlt} from '@fortawesome/free-solid-svg-icons';\r\nimport exchangeRatesApi from '../exchangeRatesApi';\r\nimport currencies from './currencies';\r\nimport Categories from './Categories';\r\nimport Item from './Item';\r\n\r\n\r\nfunction Dashboard(props) {\r\n  const types = [\"income\", \"expense\", \"deposit\"];\r\n  const [type, setType] = useState(0);\r\n  const [currency, setCurrency] = useState(\"EUR\");\r\n  const [dashboardRates, setDashboardRates] = useState({});\r\n  const [addItems, setAddItems] = useState([]);\r\n  const [totalCost, setTotalCost] = useState({ });\r\n  const [rates, setRates] = useState({});\r\n  const [totalCostCurrency, setTotalCostCurrency] = useState(\"EUR\");\r\n  const categories = [\"Food\", \"Clothes\", \"Social life\", \"Self development\", \"Health\", \"Other\"];\r\n  const [currentCategory, setCurrentCategory] = useState(-1);\r\n\r\n  useEffect(() => {\r\n    document.getElementsByClassName(\"dateInput\")[0].valueAsDate = new Date();\r\n  }, []);\r\n\r\n  useEffect(async () => {\r\n    const changeToCurrentCurrency = async () => {\r\n      const data = await exchangeRatesApi(totalCostCurrency);\r\n      setRates(data);\r\n    }\r\n    changeToCurrentCurrency();\r\n  }, [totalCostCurrency]);\r\n\r\n  useEffect(() => {\r\n    const changeToCurrentCurrency = async () => {\r\n      const data = await exchangeRatesApi(currency);\r\n      setDashboardRates(data);\r\n    }\r\n    changeToCurrentCurrency();\r\n  }, [currency]);\r\n  const incomeSVG = (\r\n          <svg width=\"70\" height=\"22\" viewBox=\"0 0 70 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path d=\"M2 12.4764C28.7826 40.5567 42.6522 -21.5155 68 12.4764\" stroke=\"#4840B5\" strokeWidth=\"4\"/>\r\n          </svg>\r\n  )\r\n  const incomeStyle = {\r\n    background: \"linear-gradient(180deg, #FFFFFF 0%, rgba(255, 255, 255, 0.2) 0.01%, rgba(72, 64, 181, 0.35) 100%)\"\r\n  }\r\n\r\n\r\n  const expenseSVG = (\r\n    <svg width=\"70\" height=\"22\" viewBox=\"0 0 70 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      <path d=\"M2 12.4764C28.7826 40.5567 42.6522 -21.5155 68 12.4764\" stroke=\"#FF9A62\" strokeWidth=\"4\"/>\r\n    </svg>\r\n  )\r\n  const expenseStyle = {\r\n    background: \"linear-gradient(180deg, #FFFFFF 0%, rgba(255, 255, 255, 0.2) 0.01%, rgba(244, 110, 35, 0.35) 100%)\"\r\n  }\r\n\r\n\r\n  const depositSVG = (\r\n    <svg width=\"70\" height=\"22\" viewBox=\"0 0 70 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      <path d=\"M2 12.4764C28.7826 40.5567 42.6522 -21.5155 68 12.4764\" stroke=\"#FF9A62\" strokeWidth=\"4\"/>\r\n    </svg>\r\n\r\n  )\r\n  const depositStyle = {\r\n    background: \"linear-gradient(180deg, #FFFFFF 0%, rgba(255, 255, 255, 0.2) 0.01%, rgba(154, 154, 154, 0.35) 100%)\"\r\n  }\r\n\r\n  const activeItem = {\r\n    boxShadow: \"2px 2px 10px 5px rgba(0, 0, 0, 0.25)\"\r\n  }\r\n\r\n  const items = [null, null, null];\r\n  items[type] = activeItem;\r\n\r\n\r\n\r\n  const changeType = (newType) => {\r\n    setType(newType);\r\n  }\r\n\r\n  const changeCurrency = (event) => {\r\n    setCurrency(event.target.value);\r\n  }\r\n\r\n\r\n\r\n\r\n  const addItem = () => {\r\n    let nameOfItem = document.getElementsByClassName(\"nameOfItemInput\")[0].value;\r\n    let costOfItem = document.getElementsByClassName(\"costOfItemInput\")[0].value;\r\n    let currencyOfItem = document.getElementsByClassName(\"currencyOfItemInput\")[0].value;\r\n    if (isNaN(costOfItem) || costOfItem.length === 0 || nameOfItem.length === 0){\r\n      return;\r\n    }\r\n    const items = [...addItems];\r\n    items.push([nameOfItem, costOfItem, currencyOfItem]);\r\n    const cost = {...totalCost};\r\n    cost[currencyOfItem] += Number(costOfItem);\r\n    setTotalCost(cost);\r\n    setAddItems(items);\r\n    document.getElementsByClassName(\"nameOfItemInput\")[0].value = \"\";\r\n    document.getElementsByClassName(\"costOfItemInput\")[0].value = \"\";\r\n  }\r\n  const displayTotalCost = () => {\r\n    let cost = 0;\r\n    for (let i = 0; i < addItems.length; ++i){\r\n      if (addItems[i][2] == totalCostCurrency){\r\n        cost += Number(addItems[i][1]);\r\n      }\r\n      else{\r\n        cost += Number(addItems[i][1]) / Number(rates[addItems[i][2]]);\r\n      }\r\n    }\r\n    return cost.toFixed(2);\r\n  }\r\n\r\n  const displayType = (type) => {\r\n    let cost = 0;\r\n    for (let i = 0; i < currencies.length; ++i){\r\n      if (props.localStorageData[type][currencies[i]] === undefined){\r\n        continue;\r\n      }\r\n      if (currency === currencies[i]){\r\n        cost += Number(props.localStorageData[type][currencies[i]]);\r\n      }\r\n      else{\r\n        cost += Number(props.localStorageData[type][currencies[i]]) / Number(dashboardRates[currencies[i]]);\r\n      }\r\n    }\r\n    return cost.toFixed(2);\r\n  }\r\n\r\n  const displayItems = () => {\r\n    const arr = [];\r\n    for (let i = 0; i < addItems.length; ++i){\r\n        let color = \"#4398c9\";\r\n        if (i % 2 === 1){\r\n          color = \"#437dd4\";\r\n        }\r\n        arr.push(<Item index = {i} deleteItem = {deleteItem} color = {color} key = {i} nameOfItem = {addItems[i][0]} costOfItem = {addItems[i][1]} currencyOfItem = {addItems[i][2]}></Item>)\r\n    }\r\n    return arr;\r\n  }\r\n  const changeTotalCostCurrency = (event) => {\r\n    let curr = event.target.value;\r\n    setTotalCostCurrency(curr);\r\n  }\r\n  const addTheTransaction = () => {\r\n    const storageData = {...props.localStorageData};\r\n    for (let i = 0; i < addItems.length; ++i){\r\n      if (storageData[types[type]][addItems[i][2]] === undefined){\r\n        storageData[types[type]][addItems[i][2]] = 0;\r\n      }\r\n      storageData[types[type]][addItems[i][2]] += Number(addItems[i][1]);\r\n    }\r\n    let today = (document.getElementsByClassName(\"dateInput\")[0].valueAsDate).toLocaleDateString()\r\n    //console.log((document.getElementsByClassName(\"dateInput\")[0].valueAsDate).toLocaleDateString());\r\n    if (localStorage.getItem(\"history\") === null){\r\n      let data = {\r\n        income: {},\r\n        expense: {},\r\n        deposit: {}\r\n      };\r\n      if (data[types[type]][today] === undefined){\r\n        data[types[type]][today] = {\r\n          items: [addItems],\r\n          categories: [categories[currentCategory]]\r\n        }\r\n      }\r\n      localStorage.setItem('history', JSON.stringify(data));\r\n    }\r\n    else{\r\n      let data = localStorage.getItem('history');\r\n      let parsedData = JSON.parse(data);\r\n      if (parsedData[types[type]][today] === undefined){\r\n        parsedData[types[type]][today] = {\r\n          items: [],\r\n          categories: []\r\n        }\r\n      }\r\n      parsedData[types[type]][today][\"items\"].push(addItems);\r\n      parsedData[types[type]][today][\"categories\"].push(categories[currentCategory]);\r\n      console.log(parsedData);\r\n      localStorage.setItem('history', JSON.stringify(parsedData));\r\n    }\r\n    setAddItems([]);\r\n    props.setLocalStorageData(storageData);\r\n  }\r\n\r\n  const deleteItem = (index) => {\r\n    const items = [...addItems];\r\n    for (let i = index; i < items.length - 1; ++i){\r\n      items[i] = items[i + 1];\r\n    }\r\n    items.pop();\r\n    setAddItems(items);\r\n  }\r\n\r\n  const displayCurrencyOptions = () => {\r\n    const arrayOfOptions = [];\r\n    for (let i = 0; i < currencies.length; ++i){\r\n      arrayOfOptions.push(<option key = {i}>{currencies[i]}</option>);\r\n    }\r\n    return arrayOfOptions;\r\n  }\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n\r\n      <div>\r\n            <div style = {{textAlign: \"center\", marginTop: \"70px\", marginBottom: \"20px\"}}>\r\n              <select onChange = {changeCurrency}>\r\n                {displayCurrencyOptions()}\r\n              </select>\r\n        </div>\r\n            <div className = \"moneyData\">\r\n\r\n              <div className = \"item\" style = {activeItem}>\r\n\r\n                <div className = \"icon\" style = {incomeStyle}>\r\n                  {incomeSVG}\r\n                </div>\r\n\r\n                <div>\r\n                  <h3>Income</h3>\r\n                  <p> {props.localStorageData === null ? 0 : displayType(\"income\").toLocaleString()} {currency}</p>\r\n                </div>\r\n\r\n              </div>\r\n\r\n              <div className = \"item\" style = {activeItem}>\r\n                \r\n                <div className = \"icon\" style = {expenseStyle}>\r\n                  {expenseSVG}\r\n                </div>\r\n                \r\n                <div>\r\n                  <h3>Expense</h3>\r\n                  <p>{props.localStorageData === null ? 0 : displayType(\"expense\").toLocaleString()} {currency}</p>\r\n                </div>\r\n\r\n              </div>\r\n\r\n              <div className = \"item\" style = {activeItem}>\r\n                \r\n                <div className = \"icon\" style = {depositStyle}>\r\n                  {incomeSVG}\r\n                </div>\r\n                \r\n                <div>\r\n                  <h3>Deposit</h3>\r\n                  <p>{props.localStorageData === null ? 0 : displayType(\"deposit\").toLocaleString()} {currency}</p>\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </div>\r\n        </div>\r\n    <div>\r\n            <h1>Add a new transaction</h1>\r\n\r\n            <div className = \"moneyData\">\r\n\r\n              <div className = \"item\" style = {items[0]} onClick = {() => {changeType(0)}}>\r\n\r\n                <div className = \"icon\" style = {incomeStyle}>\r\n                  {incomeSVG}\r\n                </div>\r\n\r\n                <div>\r\n                  <h3>Income</h3>\r\n                </div>\r\n\r\n              </div>\r\n\r\n              <div className = \"item\" style = {items[1]} onClick = {() => {changeType(1)}}>\r\n                \r\n                <div className = \"icon\" style = {expenseStyle}>\r\n                  {expenseSVG}\r\n                </div>\r\n                \r\n                <div>\r\n                  <h3>Expense</h3>\r\n                </div>\r\n\r\n              </div>\r\n\r\n              <div className = \"item\" style = {items[2]} onClick = {() => {changeType(2)}}>\r\n                \r\n                <div className = \"icon\" style = {depositStyle}>\r\n                  {incomeSVG}\r\n                </div>\r\n                \r\n                <div>\r\n                  <h3>Deposit</h3>\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </div>\r\n            <div className = \"addNewItems\">\r\n            <input type=\"date\" className = \"dateInput\"></input>\r\n                <div style = {{display: \"flex\", justifyContent: \"space-around\"}}>\r\n                  <input className = \"nameOfItemInput\" placeholder = \"name of item\"></input>\r\n                  <input className = \"costOfItemInput\" placeholder = \"cost of item\"></input>\r\n                  <select className = \"currencyOfItemInput\">\r\n                    {displayCurrencyOptions()}\r\n                  </select>\r\n                </div>\r\n                <button className = \"addItemButton\" onClick = {addItem}><FontAwesomeIcon icon={faPlus}/> Add</button>\r\n                  {displayItems()}\r\n                  {addItems.length > 0 ? <hr></hr> : null}\r\n                  {addItems.length > 0 ? <h3 style = {{display: \"inline\", marginRight: \"10px\"}}>Total cost: {displayTotalCost()} {totalCostCurrency}</h3> : null}\r\n                  {addItems.length > 0 ? (<select onChange = {changeTotalCostCurrency}>{displayCurrencyOptions()}</select>) : null}\r\n                  <Categories currentCategory = {currentCategory} setCurrentCategory = {setCurrentCategory}></Categories>\r\n                  {addItems.length > 0 ? <button className = \"addTheTransactionButton\" onClick = {addTheTransaction} style = {{display: \"block\"}}>  Add the transaction</button> : null}\r\n            </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\Categories.js",["78"],"import './Categories.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUtensils, faTshirt, faUserFriends, faBrain, faHeartbeat, faSmile} from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction Categories(props){\r\n    const styles = new Array(6).fill(null);\r\n    if (props.currentCategory != -1){\r\n        styles[props.currentCategory] = {color: \"#4398c9\"};\r\n    }\r\n    return (\r\n        <div className = \"Categories\">\r\n            <div style = {styles[0]} onClick = {() => {props.setCurrentCategory(0)}}><FontAwesomeIcon icon={faUtensils} /> Food</div>\r\n            <div style = {styles[1]} onClick = {() => {props.setCurrentCategory(1)}}><FontAwesomeIcon icon={faTshirt} /> Clothes</div>\r\n            <div style = {styles[2]} onClick = {() => {props.setCurrentCategory(2)}}><FontAwesomeIcon icon={faUserFriends} /> Social life</div>\r\n            <div style = {styles[3]} onClick = {() => {props.setCurrentCategory(3)}}><FontAwesomeIcon icon={faBrain} /> Self development</div>\r\n            <div style = {styles[4]} onClick = {() => {props.setCurrentCategory(4)}}><FontAwesomeIcon icon={faHeartbeat} /> Health</div>\r\n            <div style = {styles[5]} onClick = {() => {props.setCurrentCategory(5)}}><FontAwesomeIcon icon={faSmile} /> Other</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Categories;","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\currencies.js",["79"],"export default [\"EUR\", \"CAD\", \"HKD\", \"ISK\", \"PHP\", \"DKK\", \"HUF\", \"CZK\", \"AUD\", \"RON\", \"SEK\", \"IDR\", \"INR\", \"BRL\", \"RUB\", \"HRK\", \"JPY\", \"THB\", \"CHF\", \"SGD\", \"PLN\", \"BGN\", \"TRY\", \"CNY\", \"NOK\", \"NZD\", \"ZAR\", \"USD\", \"MXN\", \"ILS\", \"GBP\", \"KRW\", \"MYR\"];","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\Item.js",["80"],"import './Item.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport { findAllByDisplayValue } from '@testing-library/react';\r\n\r\nfunction Item(props) {\r\n  return (\r\n    <div className=\"Item\" style = {{backgroundColor: props.color}}>\r\n        <div className = \"deleteButton\">\r\n          <FontAwesomeIcon onClick = {() => props.deleteItem(props.index)} icon={faTrash} />\r\n        </div>\r\n        <h4 className = \"nameOfItem\">{props.nameOfItem}</h4>\r\n        <div style = {{display: \"inline\", float: \"right\"}}>\r\n          <h4 className = \"costOfItem\">{props.costOfItem}</h4>\r\n          <h4 className = \"currencyOfItem\">{props.currencyOfItem}</h4>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Item;\r\n","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\TopCategories.js",["81","82","83"],"import './TopCategories.css';\r\nimport {Doughnut} from 'react-chartjs-2';\r\nimport React, {useState, useEffect} from 'react';\r\nimport exchangeRatesApi from '../exchangeRatesApi';\r\nimport { getDefaultNormalizer } from '@testing-library/react';\r\nimport { parse } from '@fortawesome/fontawesome-svg-core';\r\nimport { defaults } from 'react-chartjs-2'\r\n\r\ndefaults.global.defaultFontStyle = 'Bold'\r\n\r\nfunction TopCategories(props) {\r\n\r\n  const [topData, setTopData] = useState({\r\n    labels: [\r\n    ],\r\n    datasets: [{\r\n        data: [],\r\n        backgroundColor: []\r\n    }]\r\n});\r\n  const colors = ['#FF6384', '#36A2EB','#FFCE56', '#16c79a', '#8675a9'];\r\n  useEffect(() => {\r\n    const modifyData = async (dataCurrency) => {\r\n\r\n        const history = localStorage.getItem('history');\r\n        const parsedHistory = JSON.parse(history);\r\n        let top = {};\r\n\r\n        const getData = (type, top, parsedHistory) => {\r\n            let aux = Object.keys(parsedHistory[type]);\r\n            for (let i = 0; i < aux.length; ++i){\r\n                let categories = parsedHistory[type][aux[i]][\"categories\"];\r\n                let items = parsedHistory[type][aux[i]][\"items\"];\r\n                for (let j = 0; j < categories.length; ++j){\r\n                    if (top[categories[j]] === undefined){\r\n                        top[categories[j]] = 0;\r\n                    }\r\n                    let cost = 0;\r\n                    for (let k = 0; k < items[j].length; ++k){\r\n                        if (items[j][k][2] === props.currency){\r\n                            cost += Number(items[j][k][1]);\r\n                        }\r\n                        else{\r\n                            cost += Number(items[j][k][1]) / Number(dataCurrency[items[j][k][2]]);\r\n                        }\r\n                    }\r\n                    top[categories[j]] += cost;\r\n                }\r\n            }\r\n        }\r\n        if (parsedHistory === null){\r\n            return;\r\n        }\r\n        getData(\"income\", top, parsedHistory);\r\n        getData(\"expense\", top, parsedHistory);\r\n        let keysOfTop = Object.keys(top);\r\n        let sortedTop  = [];\r\n        for (let i = 0; i < keysOfTop.length; ++i){\r\n            sortedTop.push({val: top[keysOfTop[i]], index: i});\r\n        }\r\n        sortedTop.sort((a, b) => b.val - a.val);\r\n        let topDataAux = {...topData};\r\n        topDataAux.datasets[0].data = [];\r\n        topDataAux.labels = [];\r\n        topDataAux.datasets[0].backgroundColor = [];\r\n        for (let i = 1; i <= Math.min(keysOfTop.length, props.numberOfCategories); ++i){\r\n            topDataAux.labels.push(keysOfTop[sortedTop[i - 1].index]);\r\n            topDataAux.datasets[0].data.push((sortedTop[i - 1].val).toFixed(2));\r\n            topDataAux.datasets[0].backgroundColor.push(colors[i - 1]);\r\n        }\r\n        setTopData(topDataAux);\r\n    }\r\n    const changeToCurrentCurrency = async () => {\r\n        const dataCurrency = await exchangeRatesApi(props.currency);\r\n        if (localStorage.length !== 0){\r\n          await modifyData(dataCurrency);\r\n        }\r\n      }\r\n    changeToCurrentCurrency();\r\n  }, []);\r\n  return (\r\n    <div className=\"TopCategories\">\r\n        <h1>Top {props.numberOfCategories} </h1>\r\n        <Doughnut data={topData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TopCategories;\r\n","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\components\\LineGraph.js",["84","85"],"import './LineGraph.css';\r\nimport {Line} from 'react-chartjs-2';\r\nimport React, {useState, useEffect} from 'react';\r\nimport exchangeRatesApi from '../exchangeRatesApi';\r\n\r\nfunction LineGraph(props) {\r\n    var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n    const [avarageProfit, setAvarageProfit] = useState(0);\r\n    const [data, setData] = useState({\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n            label: 'line graph',\r\n            fill: true,\r\n            lineTension: 0.1,\r\n            backgroundColor: 'rgba(75,192,192,0.4)',\r\n            borderColor: 'rgba(75,192,192,1)',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 5,\r\n            pointHoverRadius: 8,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            data: new Array(20).fill(0)\r\n            }\r\n        ]\r\n        }); \r\n\r\n\r\n    useEffect(() => {\r\n        const modifyData = async (dataCurrency) => {\r\n            const history = localStorage.getItem('history');\r\n            const parsedHistory = JSON.parse(history);\r\n            if (parsedHistory === null){\r\n                return;\r\n            }\r\n\r\n            const dataAux = {...data};\r\n            dataAux.labels = [];\r\n            dataAux.datasets[0].data = [];\r\n            const getMoney = (items) => {\r\n                let totalCost = 0;\r\n                for (let i = 0; i < items.length; ++i){\r\n                    for (let j = 0; j < items[i].length; ++j){\r\n                        if (items[i][j][2] === props.currency){\r\n                            totalCost += Number(items[i][j][1]);\r\n                        }\r\n                        else{\r\n                            totalCost += Number(items[i][j][1]) / Number(dataCurrency[items[i][j][2]]);\r\n                        }\r\n                    }\r\n                }\r\n                return totalCost;\r\n            }\r\n            let avarage = 0;\r\n            if (props.numberOfMonths === 1){\r\n\r\n            }\r\n            else{\r\n                let month = new Date().getMonth();\r\n                let year = new Date().getFullYear();\r\n                for (let i = 1; i <= props.numberOfMonths; ++i){\r\n                    let cost = 0;\r\n                    for (let day = 1; day <= 31; ++day){\r\n                        let date = \"\";\r\n                        if (day <= 9){\r\n                            date += '0';\r\n                        }\r\n                        date += day;\r\n                        date += '.';\r\n                        if (month + 1 <= 9){\r\n                            date += '0';\r\n                        }\r\n                        date += (month + 1);\r\n                        date += '.';\r\n                        date += year;\r\n                        if (parsedHistory[\"income\"][date] !== undefined){\r\n                            cost += getMoney(parsedHistory[\"income\"][date].items);\r\n                        }\r\n                        if (parsedHistory[\"expense\"][date] !== undefined){\r\n                            cost -= getMoney(parsedHistory[\"expense\"][date].items);\r\n                        }\r\n                    }\r\n                    avarage += cost;\r\n                    cost = cost.toFixed(2);\r\n                    dataAux.datasets[0].data.push(cost);\r\n                    dataAux.labels.push(months[month] + \" \" + year);\r\n                    --month;\r\n                    if (month == -1){\r\n                        month += 12;\r\n                        --year;\r\n                    }\r\n                }\r\n                avarage /= props.numberOfMonths;\r\n                avarage = avarage.toFixed(2);\r\n            }\r\n            dataAux.datasets[0].data.reverse();\r\n            dataAux.labels.reverse();\r\n            setData(dataAux);\r\n            setAvarageProfit(avarage);\r\n        }\r\n        const changeToCurrentCurrency = async () => {\r\n            const dataCurrency = await exchangeRatesApi(props.currency);\r\n            if (localStorage.length !== 0){\r\n              await modifyData(dataCurrency);\r\n            }\r\n          }\r\n        changeToCurrentCurrency();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"LineGraph\">\r\n            <h3 style = {{textAlign: \"center\"}}>Avarage Profit: {avarageProfit} {props.currency}</h3>\r\n            <div style={{ position: \"relative\", margin: \"auto\", width: \"70vw\", height: \"500px\"}}>\r\n                <Line data={data} options={{\r\n                    maintainAspectRatio : false\r\n                }}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;\r\n",{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":1,"column":16,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"94","line":2,"column":9,"nodeType":"92","messageId":"93","endLine":2,"endColumn":13},{"ruleId":"90","severity":1,"message":"95","line":2,"column":15,"nodeType":"92","messageId":"93","endLine":2,"endColumn":23},{"ruleId":"90","severity":1,"message":"96","line":3,"column":8,"nodeType":"92","messageId":"93","endLine":3,"endColumn":24},{"ruleId":"90","severity":1,"message":"97","line":14,"column":10,"nodeType":"92","messageId":"93","endLine":14,"endColumn":14},{"ruleId":"90","severity":1,"message":"98","line":14,"column":16,"nodeType":"92","messageId":"93","endLine":14,"endColumn":23},{"ruleId":"90","severity":1,"message":"99","line":15,"column":9,"nodeType":"92","messageId":"93","endLine":15,"endColumn":22},{"ruleId":"90","severity":1,"message":"100","line":18,"column":9,"nodeType":"92","messageId":"93","endLine":18,"endColumn":23},{"ruleId":"90","severity":1,"message":"101","line":22,"column":9,"nodeType":"92","messageId":"93","endLine":22,"endColumn":23},{"ruleId":"90","severity":1,"message":"102","line":4,"column":18,"nodeType":"92","messageId":"93","endLine":4,"endColumn":28},{"ruleId":"103","severity":1,"message":"104","line":27,"column":13,"nodeType":"105","endLine":33,"endColumn":4},{"ruleId":"90","severity":1,"message":"106","line":62,"column":9,"nodeType":"92","messageId":"93","endLine":62,"endColumn":19},{"ruleId":"107","severity":1,"message":"108","line":111,"column":26,"nodeType":"109","messageId":"110","endLine":111,"endColumn":28},{"ruleId":"107","severity":1,"message":"111","line":7,"column":31,"nodeType":"109","messageId":"110","endLine":7,"endColumn":33},{"ruleId":"112","severity":1,"message":"113","line":1,"column":1,"nodeType":"114","endLine":1,"endColumn":248},{"ruleId":"90","severity":1,"message":"115","line":4,"column":10,"nodeType":"92","messageId":"93","endLine":4,"endColumn":31},{"ruleId":"90","severity":1,"message":"116","line":5,"column":10,"nodeType":"92","messageId":"93","endLine":5,"endColumn":30},{"ruleId":"90","severity":1,"message":"117","line":6,"column":10,"nodeType":"92","messageId":"93","endLine":6,"endColumn":15},{"ruleId":"103","severity":1,"message":"118","line":80,"column":6,"nodeType":"119","endLine":80,"endColumn":8,"suggestions":"120"},{"ruleId":"107","severity":1,"message":"108","line":96,"column":31,"nodeType":"109","messageId":"110","endLine":96,"endColumn":33},{"ruleId":"103","severity":1,"message":"121","line":116,"column":8,"nodeType":"119","endLine":116,"endColumn":10,"suggestions":"122"},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Line' is defined but never used.","'Doughnut' is defined but never used.","'exchangeRatesApi' is defined but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","'parsedHistory' is assigned a value but never used.","'displayExpense' is assigned a value but never used.","'displayDeposit' is assigned a value but never used.","'faTrashAlt' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'depositSVG' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'findAllByDisplayValue' is defined but never used.","'getDefaultNormalizer' is defined but never used.","'parse' is defined but never used.","React Hook useEffect has missing dependencies: 'colors', 'props.currency', 'props.numberOfCategories', and 'topData'. Either include them or remove the dependency array.","ArrayExpression",["125"],"React Hook useEffect has missing dependencies: 'data', 'months', 'props.currency', and 'props.numberOfMonths'. Either include them or remove the dependency array.",["126"],"no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},"Update the dependencies array to be: [colors, props.currency, props.numberOfCategories, topData]",{"range":"131","text":"132"},"Update the dependencies array to be: [data, months, props.currency, props.numberOfMonths]",{"range":"133","text":"134"},[3105,3107],"[colors, props.currency, props.numberOfCategories, topData]",[4518,4520],"[data, months, props.currency, props.numberOfMonths]"]