[{"C:\\Users\\Patrick\\Desktop\\money-manager\\src\\index.js":"1","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\App.js":"2","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\reportWebVitals.js":"3","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\Dashboard.js":"4","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\Graph.js":"5","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\Nav.js":"6","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\Item.js":"7","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\exchangeRatesApi.js":"8","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\currencies.js":"9","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\History.js":"10","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\Categories.js":"11"},{"size":585,"mtime":1608904756719,"results":"12","hashOfConfig":"13"},{"size":1719,"mtime":1609349468332,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":11215,"mtime":1609671694789,"results":"16","hashOfConfig":"13"},{"size":4836,"mtime":1609672258637,"results":"17","hashOfConfig":"13"},{"size":1064,"mtime":1609349683790,"results":"18","hashOfConfig":"13"},{"size":793,"mtime":1608977996972,"results":"19","hashOfConfig":"13"},{"size":240,"mtime":1608718311575,"results":"20","hashOfConfig":"13"},{"size":247,"mtime":1609271617338,"results":"21","hashOfConfig":"13"},{"size":903,"mtime":1609368086802,"results":"22","hashOfConfig":"13"},{"size":1337,"mtime":1609671755733,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1d5zy7e",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},"C:\\Users\\Patrick\\Desktop\\money-manager\\src\\index.js",[],["53","54"],"C:\\Users\\Patrick\\Desktop\\money-manager\\src\\App.js",[],"C:\\Users\\Patrick\\Desktop\\money-manager\\src\\reportWebVitals.js",[],"C:\\Users\\Patrick\\Desktop\\money-manager\\src\\Dashboard.js",["55","56","57","58"],"import React, {useEffect, useState} from 'react';\r\nimport './Dashboard.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faTrashAlt} from '@fortawesome/free-solid-svg-icons';\r\nimport Item from './Item';\r\nimport exchangeRatesApi from './exchangeRatesApi';\r\nimport currencies from './currencies';\r\nimport Categories from './Categories';\r\n\r\n\r\nfunction Dashboard(props) {\r\n  const types = [\"income\", \"expense\", \"deposit\"];\r\n  const [type, setType] = useState(0);\r\n  const [currency, setCurrency] = useState(\"EUR\");\r\n  const [dashboardRates, setDashboardRates] = useState({});\r\n  const [addItems, setAddItems] = useState([]);\r\n  const [totalCost, setTotalCost] = useState({ });\r\n  const [rates, setRates] = useState({});\r\n  const [totalCostCurrency, setTotalCostCurrency] = useState(\"EUR\");\r\n  const categories = [\"food\", \"clothes\", \"social life\", \"self development\", \"health\", \"other\"];\r\n  const [currentCategory, setCurrentCategory] = useState(-1);\r\n\r\n  useEffect(async () => {\r\n    const changeToCurrentCurrency = async () => {\r\n      const data = await exchangeRatesApi(totalCostCurrency);\r\n      setRates(data);\r\n    }\r\n    changeToCurrentCurrency();\r\n  }, [totalCostCurrency]);\r\n\r\n  useEffect(() => {\r\n    const changeToCurrentCurrency = async () => {\r\n      const data = await exchangeRatesApi(currency);\r\n      setDashboardRates(data);\r\n    }\r\n    changeToCurrentCurrency();\r\n  }, [currency]);\r\n  const incomeSVG = (\r\n          <svg width=\"70\" height=\"22\" viewBox=\"0 0 70 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path d=\"M2 12.4764C28.7826 40.5567 42.6522 -21.5155 68 12.4764\" stroke=\"#4840B5\" strokeWidth=\"4\"/>\r\n          </svg>\r\n  )\r\n  const incomeStyle = {\r\n    background: \"linear-gradient(180deg, #FFFFFF 0%, rgba(255, 255, 255, 0.2) 0.01%, rgba(72, 64, 181, 0.35) 100%)\"\r\n  }\r\n\r\n\r\n  const expenseSVG = (\r\n    <svg width=\"70\" height=\"22\" viewBox=\"0 0 70 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      <path d=\"M2 12.4764C28.7826 40.5567 42.6522 -21.5155 68 12.4764\" stroke=\"#FF9A62\" strokeWidth=\"4\"/>\r\n    </svg>\r\n  )\r\n  const expenseStyle = {\r\n    background: \"linear-gradient(180deg, #FFFFFF 0%, rgba(255, 255, 255, 0.2) 0.01%, rgba(244, 110, 35, 0.35) 100%)\"\r\n  }\r\n\r\n\r\n  const depositSVG = (\r\n    <svg width=\"70\" height=\"22\" viewBox=\"0 0 70 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      <path d=\"M2 12.4764C28.7826 40.5567 42.6522 -21.5155 68 12.4764\" stroke=\"#FF9A62\" strokeWidth=\"4\"/>\r\n    </svg>\r\n\r\n  )\r\n  const depositStyle = {\r\n    background: \"linear-gradient(180deg, #FFFFFF 0%, rgba(255, 255, 255, 0.2) 0.01%, rgba(154, 154, 154, 0.35) 100%)\"\r\n  }\r\n\r\n  const activeItem = {\r\n    boxShadow: \"2px 2px 10px 5px rgba(0, 0, 0, 0.25)\"\r\n  }\r\n\r\n  const items = [null, null, null];\r\n  items[type] = activeItem;\r\n\r\n\r\n\r\n  const changeType = (newType) => {\r\n    setType(newType);\r\n  }\r\n\r\n  const changeCurrency = (event) => {\r\n    setCurrency(event.target.value);\r\n  }\r\n\r\n\r\n\r\n\r\n  const addItem = () => {\r\n    let nameOfItem = document.getElementsByClassName(\"nameOfItemInput\")[0].value;\r\n    let costOfItem = document.getElementsByClassName(\"costOfItemInput\")[0].value;\r\n    let currencyOfItem = document.getElementsByClassName(\"currencyOfItemInput\")[0].value;\r\n    if (isNaN(costOfItem) || costOfItem.length === 0 || nameOfItem.length === 0){\r\n      return;\r\n    }\r\n    const items = [...addItems];\r\n    items.push([nameOfItem, costOfItem, currencyOfItem]);\r\n    const cost = {...totalCost};\r\n    cost[currencyOfItem] += Number(costOfItem);\r\n    setTotalCost(cost);\r\n    setAddItems(items);\r\n    document.getElementsByClassName(\"nameOfItemInput\")[0].value = \"\";\r\n    document.getElementsByClassName(\"costOfItemInput\")[0].value = \"\";\r\n  }\r\n  const displayTotalCost = () => {\r\n    let cost = 0;\r\n    for (let i = 0; i < addItems.length; ++i){\r\n      if (addItems[i][2] == totalCostCurrency){\r\n        cost += Number(addItems[i][1]);\r\n      }\r\n      else{\r\n        cost += Number(addItems[i][1]) / Number(rates[addItems[i][2]]);\r\n      }\r\n    }\r\n    return cost.toFixed(2);\r\n  }\r\n\r\n  const displayType = (type) => {\r\n    let cost = 0;\r\n    for (let i = 0; i < currencies.length; ++i){\r\n      if (props.localStorageData[type][currencies[i]] === undefined){\r\n        continue;\r\n      }\r\n      if (currency === currencies[i]){\r\n        cost += Number(props.localStorageData[type][currencies[i]]);\r\n      }\r\n      else{\r\n        cost += Number(props.localStorageData[type][currencies[i]]) / Number(dashboardRates[currencies[i]]);\r\n      }\r\n    }\r\n    return cost.toFixed(2);\r\n  }\r\n\r\n  const displayItems = () => {\r\n    const arr = [];\r\n    for (let i = 0; i < addItems.length; ++i){\r\n        let color = \"#4398c9\";\r\n        if (i % 2 === 1){\r\n          color = \"#437dd4\";\r\n        }\r\n        arr.push(<Item index = {i} deleteItem = {deleteItem} color = {color} key = {i} nameOfItem = {addItems[i][0]} costOfItem = {addItems[i][1]} currencyOfItem = {addItems[i][2]}></Item>)\r\n    }\r\n    return arr;\r\n  }\r\n  const changeTotalCostCurrency = (event) => {\r\n    let curr = event.target.value;\r\n    setTotalCostCurrency(curr);\r\n  }\r\n  const addTheTransaction = () => {\r\n    const storageData = {...props.localStorageData};\r\n    for (let i = 0; i < addItems.length; ++i){\r\n      if (storageData[types[type]][addItems[i][2]] === undefined){\r\n        storageData[types[type]][addItems[i][2]] = 0;\r\n      }\r\n      storageData[types[type]][addItems[i][2]] += Number(addItems[i][1]);\r\n    }\r\n    let today = new Date();\r\n    today = today.toLocaleDateString();\r\n    if (localStorage.getItem(\"history\") === null){\r\n      let data = {\r\n        income: {},\r\n        expense: {},\r\n        deposit: {}\r\n      };\r\n      if (data[types[type]][today] === undefined){\r\n        data[types[type]][today] = {\r\n          items: [addItems],\r\n          categories: [categories[currentCategory]]\r\n        }\r\n      }\r\n      localStorage.setItem('history', JSON.stringify(data));\r\n    }\r\n    else{\r\n      let data = localStorage.getItem('history');\r\n      let parsedData = JSON.parse(data);\r\n      if (parsedData[types[type]][today] === undefined){\r\n        parsedData[types[type]][today] = {\r\n          items: [],\r\n          categories: []\r\n        }\r\n      }\r\n      parsedData[types[type]][today][\"items\"].push(addItems);\r\n      parsedData[types[type]][today][\"categories\"].push(categories[currentCategory]);\r\n      console.log(parsedData);\r\n      localStorage.setItem('history', JSON.stringify(parsedData));\r\n    }\r\n    setAddItems([]);\r\n    props.setLocalStorageData(storageData);\r\n  }\r\n\r\n  const deleteItem = (index) => {\r\n    const items = [...addItems];\r\n    for (let i = index; i < items.length - 1; ++i){\r\n      items[i] = items[i + 1];\r\n    }\r\n    items.pop();\r\n    setAddItems(items);\r\n  }\r\n\r\n  const displayCurrencyOptions = () => {\r\n    const arrayOfOptions = [];\r\n    for (let i = 0; i < currencies.length; ++i){\r\n      arrayOfOptions.push(<option key = {i}>{currencies[i]}</option>);\r\n    }\r\n    return arrayOfOptions;\r\n  }\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n\r\n      <div>\r\n            <div style = {{textAlign: \"center\", marginTop: \"70px\", marginBottom: \"20px\"}}>\r\n              <select onChange = {changeCurrency}>\r\n                {displayCurrencyOptions()}\r\n              </select>\r\n        </div>\r\n            <div className = \"moneyData\">\r\n\r\n              <div className = \"item\" style = {activeItem}>\r\n\r\n                <div className = \"icon\" style = {incomeStyle}>\r\n                  {incomeSVG}\r\n                </div>\r\n\r\n                <div>\r\n                  <h3>Income</h3>\r\n                  <p> {props.localStorageData === null ? 0 : displayType(\"income\").toLocaleString()} {currency}</p>\r\n                </div>\r\n\r\n              </div>\r\n\r\n              <div className = \"item\" style = {activeItem}>\r\n                \r\n                <div className = \"icon\" style = {expenseStyle}>\r\n                  {expenseSVG}\r\n                </div>\r\n                \r\n                <div>\r\n                  <h3>Expense</h3>\r\n                  <p>{props.localStorageData === null ? 0 : displayType(\"expense\").toLocaleString()} {currency}</p>\r\n                </div>\r\n\r\n              </div>\r\n\r\n              <div className = \"item\" style = {activeItem}>\r\n                \r\n                <div className = \"icon\" style = {depositStyle}>\r\n                  {incomeSVG}\r\n                </div>\r\n                \r\n                <div>\r\n                  <h3>Deposit</h3>\r\n                  <p>{props.localStorageData === null ? 0 : displayType(\"deposit\").toLocaleString()} {currency}</p>\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </div>\r\n        </div>\r\n    <div>\r\n            <h1>Add a new transaction</h1>\r\n\r\n            <div className = \"moneyData\">\r\n\r\n              <div className = \"item\" style = {items[0]} onClick = {() => {changeType(0)}}>\r\n\r\n                <div className = \"icon\" style = {incomeStyle}>\r\n                  {incomeSVG}\r\n                </div>\r\n\r\n                <div>\r\n                  <h3>Income</h3>\r\n                </div>\r\n\r\n              </div>\r\n\r\n              <div className = \"item\" style = {items[1]} onClick = {() => {changeType(1)}}>\r\n                \r\n                <div className = \"icon\" style = {expenseStyle}>\r\n                  {expenseSVG}\r\n                </div>\r\n                \r\n                <div>\r\n                  <h3>Expense</h3>\r\n                </div>\r\n\r\n              </div>\r\n\r\n              <div className = \"item\" style = {items[2]} onClick = {() => {changeType(2)}}>\r\n                \r\n                <div className = \"icon\" style = {depositStyle}>\r\n                  {incomeSVG}\r\n                </div>\r\n                \r\n                <div>\r\n                  <h3>Deposit</h3>\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </div>\r\n            <div className = \"addNewItems\">\r\n                <div style = {{display: \"flex\", justifyContent: \"space-around\"}}>\r\n                  <input className = \"nameOfItemInput\" placeholder = \"name of item\"></input>\r\n                  <input className = \"costOfItemInput\" placeholder = \"cost of item\"></input>\r\n                  <select className = \"currencyOfItemInput\">\r\n                    {displayCurrencyOptions()}\r\n                  </select>\r\n                </div>\r\n                <button className = \"addItemButton\" onClick = {addItem}><FontAwesomeIcon icon={faPlus}/> Add</button>\r\n                  {displayItems()}\r\n                  {addItems.length > 0 ? <hr></hr> : null}\r\n                  {addItems.length > 0 ? <h3 style = {{display: \"inline\", marginRight: \"10px\"}}>Total cost: {displayTotalCost()} {totalCostCurrency}</h3> : null}\r\n                  {addItems.length > 0 ? (<select onChange = {changeTotalCostCurrency}>{displayCurrencyOptions()}</select>) : null}\r\n                  <Categories currentCategory = {currentCategory} setCurrentCategory = {setCurrentCategory}></Categories>\r\n                  {addItems.length > 0 ? <button className = \"addTheTransactionButton\" onClick = {addTheTransaction} style = {{display: \"block\"}}>  Add the transaction</button> : null}\r\n            </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\Graph.js",["59"],"import React, {useEffect, useState} from 'react';\r\nimport {Line, Doughnut} from 'react-chartjs-2';\r\nimport exchangeRatesApi from './exchangeRatesApi';\r\nimport currencies from './currencies';\r\nimport './Graph.css';\r\n\r\nfunction Graph() {\r\n  console.log(currencies);\r\n  // current currency used to display data on graph\r\n  const [currency, setCurrency] = useState(\"EUR\");\r\n  \r\n  // graph data for 3 days\r\n  const [data, setData] = useState({\r\n    labels: ['other day', 'yesterday', 'today'],\r\n    datasets: [\r\n      {\r\n        label: 'Last 3 days',\r\n        fill: true,\r\n        lineTension: 0.1,\r\n        backgroundColor: 'rgba(75,192,192,0.4)',\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 5,\r\n        pointHoverRadius: 8,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n        data: [0, 0, 0]\r\n      }\r\n    ]\r\n  });\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const changeToCurrentCurrency = async () => {\r\n      const dataCurrency = await exchangeRatesApi(currency);\r\n      if (localStorage.length !== 0){\r\n        modifyData(dataCurrency);\r\n      }\r\n    }\r\n    changeToCurrentCurrency();\r\n  }, [currency]);\r\n\r\n\r\n\r\n  const changeCurrency = (event) => {\r\n    setCurrency(event.target.value);\r\n  }\r\n\r\n  const getTotalProfit = (parsedHistory, type, date, money, aux) => {\r\n    if (parsedHistory[type][date] !== undefined){\r\n      for (let i = 0; i < parsedHistory[type][date][\"items\"].length; ++i){\r\n        const v = parsedHistory[type][date][\"items\"][i];\r\n        for (let j = 0; j < v.length; ++j){\r\n          let amount = Number(v[j][1]);\r\n          let curr = v[j][2];\r\n          if (money[curr] === undefined){\r\n            money[curr] = 0;\r\n          }\r\n          money[curr] += amount * aux;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const getCost = (money, rates) => {\r\n    let cost = 0;\r\n    for (let i = 0; i < currencies.length; ++i){\r\n      if (money[currencies[i]] === undefined){\r\n        money[currencies[i]] = 0;\r\n      }\r\n      if (currency === currencies[i]){\r\n        cost += Number(money[currencies[i]]);\r\n      }\r\n      else{\r\n        cost += Number(money[currencies[i]]) / Number(rates[currencies[i]]);\r\n      }\r\n    }\r\n    return cost.toFixed(2);\r\n  }\r\n  const modifyData = (rates) => {\r\n    let history = localStorage.getItem('history');\r\n    if (history === null){\r\n      return;\r\n    }\r\n    const auxData = {...data};\r\n    auxData.datasets[0].data = [];\r\n    let parsedHistory = JSON.parse(history);\r\n    let today = new Date();\r\n    let yesterday = new Date(today)\r\n    yesterday.setDate(yesterday.getDate() - 1);\r\n    yesterday = yesterday.toLocaleDateString();\r\n    let otherDay = new Date(today);\r\n    otherDay.setDate(otherDay.getDate() - 2);\r\n    otherDay = otherDay.toLocaleDateString();\r\n    today = today.toLocaleDateString();\r\n    let money = {};\r\n    getTotalProfit(parsedHistory, \"income\", otherDay, money, 1);\r\n    getTotalProfit(parsedHistory, \"expense\", otherDay, money, -1);\r\n    let total = getCost(money, rates);\r\n    auxData.datasets[0].data.push(total);\r\n\r\n    money = {};\r\n    getTotalProfit(parsedHistory, \"income\", yesterday, money, 1);\r\n    getTotalProfit(parsedHistory, \"expense\", yesterday, money, -1);\r\n    total = getCost(money, rates);\r\n    auxData.datasets[0].data.push(total);\r\n\r\n    money = {};\r\n    getTotalProfit(parsedHistory, \"income\", today, money, 1);\r\n    getTotalProfit(parsedHistory, \"expense\", today, money, -1);\r\n    console.log(money);\r\n    total = getCost(money, rates);\r\n    auxData.datasets[0].data.push(total);\r\n    setData(auxData);\r\n  }\r\n\r\n  const displayCurrencyOptions = () => {\r\n    const arrayOfOptions = [];\r\n    for (let i = 0; i < currencies.length; ++i){\r\n      arrayOfOptions.push(<option key = {i}>{currencies[i]}</option>);\r\n    }\r\n    return arrayOfOptions;\r\n  }\r\n\r\n  return (\r\n    <div className=\"graph\">\r\n      <select style = {{margin: \"auto\", marginTop: \"40px\"}} onChange = {changeCurrency}>\r\n        {displayCurrencyOptions()}\r\n      </select>\r\n      <div style={{ position: \"relative\", margin: \"auto\", width: \"70vw\", height: \"500px\"}}>\r\n       <Line data={data} options={{\r\n            maintainAspectRatio : false\r\n          }}/>\r\n      </div>\r\n      <Doughnut data={{\r\n\tlabels: [\r\n\t\t'Red',\r\n\t\t'Green',\r\n\t\t'Yellow'\r\n\t],\r\n\tdatasets: [{\r\n\t\tdata: [300, 50, 100],\r\n\t\tbackgroundColor: [\r\n\t\t'#FF6384',\r\n\t\t'#36A2EB',\r\n\t\t'#FFCE56'\r\n\t\t],\r\n\t\thoverBackgroundColor: [\r\n\t\t'#FF6384',\r\n\t\t'#36A2EB',\r\n\t\t'#FFCE56'\r\n\t\t]\r\n\t}]\r\n}} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Graph;\r\n","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\Nav.js",[],"C:\\Users\\Patrick\\Desktop\\money-manager\\src\\Item.js",["60"],"import './Item.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport { findAllByDisplayValue } from '@testing-library/react';\r\n\r\nfunction Item(props) {\r\n  return (\r\n    <div className=\"Item\" style = {{backgroundColor: props.color}}>\r\n        <div className = \"deleteButton\">\r\n          <FontAwesomeIcon onClick = {() => props.deleteItem(props.index)} icon={faTrash} />\r\n        </div>\r\n        <h4 className = \"nameOfItem\">{props.nameOfItem}</h4>\r\n        <div style = {{display: \"inline\", float: \"right\"}}>\r\n          <h4 className = \"costOfItem\">{props.costOfItem}</h4>\r\n          <h4 className = \"currencyOfItem\">{props.currencyOfItem}</h4>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Item;\r\n","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\exchangeRatesApi.js",[],"C:\\Users\\Patrick\\Desktop\\money-manager\\src\\currencies.js",["61"],"export default [\"EUR\", \"CAD\", \"HKD\", \"ISK\", \"PHP\", \"DKK\", \"HUF\", \"CZK\", \"AUD\", \"RON\", \"SEK\", \"IDR\", \"INR\", \"BRL\", \"RUB\", \"HRK\", \"JPY\", \"THB\", \"CHF\", \"SGD\", \"PLN\", \"BGN\", \"TRY\", \"CNY\", \"NOK\", \"NZD\", \"ZAR\", \"USD\", \"MXN\", \"ILS\", \"GBP\", \"KRW\", \"MYR\"];","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\History.js",["62","63","64"],"import React, {useState} from 'react';\r\nimport './History.css'\r\nfunction History() {\r\n\r\n  const [currentDate, setCurrentDate] = useState(null);\r\n\r\n  const displayIncome = (date) => {\r\n    if (date === null){\r\n      return <h1>nu avem data</h1>\r\n    }\r\n    let history = localStorage.getItem('history');\r\n    if (history === null){\r\n      return null;\r\n    }\r\n    let parsedHistory = JSON.parse(history);\r\n  }\r\n\r\n  const displayExpense = (date) => {\r\n\r\n  }\r\n\r\n  const displayDeposit = (date) => {\r\n    \r\n  }\r\n  return (\r\n    <div className=\"History\">\r\n        <input type=\"date\" onChange = {(event) => setCurrentDate(event.target.value)}></input>\r\n        <h3 style = {{marginLeft: \"2rem\"}}>income</h3>\r\n        {displayIncome(currentDate)}\r\n        <h3 style = {{marginLeft: \"2rem\"}}>expense</h3>\r\n        <h3 style = {{marginLeft: \"2rem\"}}>deposit</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default History;\r\n","C:\\Users\\Patrick\\Desktop\\money-manager\\src\\Categories.js",["65"],"import './Categories.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUtensils, faTshirt, faUserFriends, faBrain, faHeartbeat, faSmile} from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction Categories(props){\r\n    const styles = new Array(6).fill(null);\r\n    if (props.currentCategory != -1){\r\n        styles[props.currentCategory] = {color: \"#4398c9\"};\r\n    }\r\n    return (\r\n        <div className = \"Categories\">\r\n            <div style = {styles[0]} onClick = {() => {props.setCurrentCategory(0)}}><FontAwesomeIcon icon={faUtensils} /> food</div>\r\n            <div style = {styles[1]} onClick = {() => {props.setCurrentCategory(1)}}><FontAwesomeIcon icon={faTshirt} /> clothes</div>\r\n            <div style = {styles[2]} onClick = {() => {props.setCurrentCategory(2)}}><FontAwesomeIcon icon={faUserFriends} /> social life</div>\r\n            <div style = {styles[3]} onClick = {() => {props.setCurrentCategory(3)}}><FontAwesomeIcon icon={faBrain} /> self development</div>\r\n            <div style = {styles[4]} onClick = {() => {props.setCurrentCategory(4)}}><FontAwesomeIcon icon={faHeartbeat} /> health</div>\r\n            <div style = {styles[5]} onClick = {() => {props.setCurrentCategory(5)}}><FontAwesomeIcon icon={faSmile} /> other</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Categories;",{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":4,"column":18,"nodeType":"72","messageId":"73","endLine":4,"endColumn":28},{"ruleId":"74","severity":1,"message":"75","line":23,"column":13,"nodeType":"76","endLine":29,"endColumn":4},{"ruleId":"70","severity":1,"message":"77","line":58,"column":9,"nodeType":"72","messageId":"73","endLine":58,"endColumn":19},{"ruleId":"78","severity":1,"message":"79","line":107,"column":26,"nodeType":"80","messageId":"81","endLine":107,"endColumn":28},{"ruleId":"74","severity":1,"message":"82","line":50,"column":6,"nodeType":"83","endLine":50,"endColumn":16,"suggestions":"84"},{"ruleId":"70","severity":1,"message":"85","line":4,"column":10,"nodeType":"72","messageId":"73","endLine":4,"endColumn":31},{"ruleId":"86","severity":1,"message":"87","line":1,"column":1,"nodeType":"88","endLine":1,"endColumn":248},{"ruleId":"70","severity":1,"message":"89","line":15,"column":9,"nodeType":"72","messageId":"73","endLine":15,"endColumn":22},{"ruleId":"70","severity":1,"message":"90","line":18,"column":9,"nodeType":"72","messageId":"73","endLine":18,"endColumn":23},{"ruleId":"70","severity":1,"message":"91","line":22,"column":9,"nodeType":"72","messageId":"73","endLine":22,"endColumn":23},{"ruleId":"78","severity":1,"message":"92","line":7,"column":31,"nodeType":"80","messageId":"81","endLine":7,"endColumn":33},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'faTrashAlt' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'depositSVG' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'modifyData'. Either include it or remove the dependency array.","ArrayExpression",["95"],"'findAllByDisplayValue' is defined but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'parsedHistory' is assigned a value but never used.","'displayExpense' is assigned a value but never used.","'displayDeposit' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},"Update the dependencies array to be: [currency, modifyData]",{"range":"98","text":"99"},[1479,1489],"[currency, modifyData]"]